{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","className","content","onClick","services_notes","axios","get","then","response","data","newObject","post","id","changedObject","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","concat","date","noteToShow","filter","components_Notification","map","components_Note","key","find","n","changedNote","objectSpread","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","Date","toISOString","Math","random","createdNote","value","onChange","target","type","App_Footer","ReactDOM","createRoot","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.4b0350db.chunk.js","sourcesContent":["import React from \"react\"\n\nconst Note = ({note, toggleImportance}) => {\n  const label = note.important ? 'make not important' : 'make important'\n  return(\n    <li className='note'>\n      {note.content}   \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\nexport default Note  ","import axios from \"axios\"\n\n// 将获取notes信息的模块单独提取出来\n\nconst baseURL = '/api/notes'\n\nconst getAll = () => (\n    axios.get(baseURL).then(response => response.data)\n)\n\nconst create = (newObject) =>(\n    axios.post(baseURL, newObject).then(response => response.data)\n)\n\nconst update = (id, changedObject) =>(\n    axios.put(baseURL+id, changedObject).then(response => response.data)\n)\n\nexport default{\n    getAll,\n    create,\n    update\n}\n","import React from \"react\"\n\nconst Notification = ({ message }) => {\n    if (message === null){\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            { message }\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\nimport { useEffect } from 'react'\nimport Note from './components/Note'\nimport { useState } from 'react'\nimport noteService from './services/notes'\nimport './index.css'\nimport Notification from './components/Notification'\n\n\nconst Footer = () => {\n  // 内联样式，React更推荐使用内联样式，这样可以将一个组件的所有内容汇总到一个文件当中\n  // 而不是将html, javascript, css三者单独分开\n  const footerStyle = {\n    color: 'green', \n    fontStyle: 'italic', \n    fontSize: 16\n  }\n  return (\n    <p style={footerStyle}>Note app, Department of Computer Science, University of Helsinki 2022 </p>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happend ...')\n\n  // 利用效果钩子来获取数据\n  // 两个参数，第一个参数：用于请求数据的函数，第二个参数：用于指定运行频率（[]代表只运行加载的第一次）\n  useEffect(() => {\n    // console.log('effect')\n    noteService.getAll()\n      .then(initialNotes => {\n        // console.log('promise fulfilled')\n        const nonExisting = {\n          id: 10000,\n          content: 'This note is not saved to server',\n          date: '2019-05-30T17:30:31.098Z',\n          important: true,\n        }\n        setNotes(initialNotes.concat(nonExisting))\n      })\n  }, [])\n  // console.log('render', notes.length, 'notes')\n\n\n  // 处理表单的提交内容\n  const addNote = (event) =>{\n    event.preventDefault()\n    const newObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5\n    }\n    // // 只是更新了notes的变量，并没有上传到数据服务器\n    // console.log(newObject)\n    // setNotes(notes.concat(newObject))\n    // setNewNote('')\n\n    // 通过POST方法将提交的内容存储在json-server的db.json文件中\n    noteService.create(newObject)\n      .then(createdNote =>{\n        setNotes(notes.concat(createdNote))\n        setNewNote('')\n      })\n  }\n\n\n  // 处理输入框的内容变化\n  // 同步输入框和newNote内容的一致性\n  const handleNoteChange = (event) =>{\n    // console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n\n  const noteToShow = showAll ? notes : notes.filter(note => note.important === true) \n\n\n  // 修改note中的important属性的处理器\n  const toggleImportanceOf = (id) =>{\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important : !note.important}\n    noteService.update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id === id ? returnedNote : note ))\n      })\n      .catch(error =>{\n        // alert('the note ' + note.content + 'was already delete from server')\n        setErrorMessage(`Note '${note.content}' was already removed from server`)\n        setTimeout(() => { setErrorMessage(null) }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      { /* 通过添加一个按钮，选择important的note输出 */ }\n      <button onClick={() => setShowAll(!showAll)}>\n        {showAll ? 'Show Important' : 'Show All'}\n      </button>\n\n      <ul>\n        { // 使用map函数来输出note中的所有元素\n          // 添加键值，避免控制台的警告\n          noteToShow.map(note => <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>)\n        }\n      </ul>\n      \n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange}/>\n        <button type='submit'>save</button>\n      </form>\n\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom/client'\n\nimport App from './App'\n\n// const notes = [\n//   {\n//     id: 1,\n//     content: 'HTML is easy',\n//     date: '2019-05-30T17:30:31.098Z',\n//     important: true\n//   },\n//   {\n//     id: 2,\n//     content: 'Browser can execute only JavaScript',\n//     date: '2019-05-30T18:39:34.091Z',\n//     important: false\n//   },\n//   {\n//     id: 3,\n//     content: 'GET and POST are the most important methods of HTTP protocol',\n//     date: '2019-05-30T19:20:14.298Z',\n//     important: true\n//   }\n// ]\n\n\n// axios.get('http://localhost:3001/notes').then(response => {\n//   const notes = response.data\n//   ReactDOM.createRoot(document.getElementById('root')).render(<App notes={notes} />)\n// })\n\nReactDOM.createRoot(document.getElementById('root')).render(<App />)"],"sourceRoot":""}